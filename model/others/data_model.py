"""
========================================================

        Introduction to artificial intelligence

                         PacNET

========================================================
@ Victor Mangeleer - S181670

-------------
Documentation
-------------

This file contains functions used to load the data from 
the Pacman game inside the DATA folder. They will be used 
to train our PacNET.

"""

import numpy as np


# Loads the data generated by the Pacman games as numpy 3 dimensional matrices
def loadData(x_file, y_file):

    # Opening the files
    with open(x_file) as f:
        x_lines = f.readlines()

    with open(y_file) as g:
        y_lines = g.readlines()

    #---------
    # x - data
    #---------
    # Index to locate the first iteration
    index_first = 1

    # Contains temporarily the matrices
    x_2D = []
    x_3D = []

    # Reading all the lines and building the matrices
    for line in x_lines:
        
        # Removes unwanted characters
        line = line.replace("\n", "")

        # First iteration
        if index_first == 1:
            index_first = 0
            continue

        # End of current matrice reading
        if line[0] == "<":

            # Transforming into 2D numpy matrices stacking vertically
            x_3D.append(x_2D)

            # Reseting the list for future reading
            x_2D = []

        # Adding the next row of the matrix
        else:
            x_2D.append([float(x) for x in line.split()])

    # Conversion to 3D numpy matrix
    x_3D = np.asarray(x_3D)

    #---------
    # y - data
    #---------
    # Index to locate the first iteration
    index_first = 1

    # Contains temporarily the matrices
    y_1D = []
    y_2D = []

    # Reading all the lines and building the matrices
    for line in y_lines:
        
        # Removes unwanted characters
        line = line.replace("\n", "")

        # First iteration
        if index_first == 1:
            index_first = 0
            continue

        # End of current matrice reading
        if line[0] == "<":

            # Transforming into 2D numpy matrices stacking vertically
            y_2D.append(y_1D)

            # Reseting the list for future reading
            y_1D = []

        # Adding the next row of the matrix
        else:
            y_1D.append(float(line))

    y_2D = np.asarray(y_2D)

    return x_3D, y_2D
















